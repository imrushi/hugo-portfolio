<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rushi Panchariya</title><link>/</link><description>Recent content on Rushi Panchariya</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Let's Go</title><link>/posts/lets-go/</link><pubDate>Fri, 25 Aug 2023 09:05:10 +0530</pubDate><guid>/posts/lets-go/</guid><description>Begin This is the new beginning and also my second blog, which is also a non-technical blog (first blog). I have decided to start writing blogs so that I can share my thoughts and knowledge and improve my writing skills. I will be writing blogs about mostly technical stuff and sometimes non-technical stuff. In technical blogs, I will cover whatever research I have done, and while doing research, I will keep my notes in the Notes section.</description><content>&lt;h2 id="begin">Begin&lt;/h2>
&lt;p>This is the new beginning and also my second blog, which is also a non-technical blog (&lt;a href="https://rushipanchariya.medium.com/how-to-use-face-api-js-for-face-detection-in-video-or-image-using-angular-fca1e4bef797">first blog&lt;/a>). I have decided to start writing blogs so that I can share my thoughts and knowledge and improve my writing skills. I will be writing blogs about mostly technical stuff and sometimes non-technical stuff. In technical blogs, I will cover whatever research I have done, and while doing research, I will keep my notes in the &lt;a href="/notes/">Notes section&lt;/a>.&lt;/p>
&lt;h2 id="plan-and-present">Plan and Present&lt;/h2>
&lt;p>As of now, I don’t have a full plan for what I am going to write, which topics I will cover, or where it will go. But I remember a quote that says to &lt;code>go with the flow and be more concerned with the journey than the destination&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;A good traveler has no fixed plans, and is not intent on arriving.&amp;rdquo; - Lao Tzu&lt;/p>
&lt;/blockquote>
&lt;p>To start with, I will be writing blogs about &lt;a href="https://go.dev/">Golang&lt;/a>, which I am currently obsessed with.&lt;/p>
&lt;p>As said, I am currently obsessed with Golang, like how it internally works and all. I will start with its basics, and as I go along with my research, I will dig down into how Golang works internally. I am more curious to do research on its internal workings and its concurrency. I will try to explain all the things in an easy way (I hope so 😬).&lt;/p>
&lt;p>As I go with blogs, I will create YouTube videos for the same on my channel. I have lots of project ideas that I will create as an example, and if it is an interesting idea or helpful, I will make it open-source, or you guys can start contributing your ideas to the project.&lt;/p>
&lt;p>From my contribution, I have remembered how I struggled with starting to contribute to open-source projects. So definitely, I will write a blog about how to get started with open source. Also,share my experience with it. As of now,I am contributing to &lt;a href="https://github.com/ory/cli-vscode-extension">vscode-extension&lt;/a> for &lt;a href="https://ory.sh">ORY&lt;/a> organization, which mostly provides solutions in the areas of authentication, authorization, access control, and zero-trust networking with their open-source projects. I will create a new tab where I can keep track of the ideas.&lt;/p>
&lt;p>So my plan will be, in short:&lt;/p>
&lt;ul>
&lt;li>Research on the topic&lt;/li>
&lt;li>Add to &lt;a href="/notes/">Notes&lt;/a>&lt;/li>
&lt;li>Write blog&lt;/li>
&lt;li>Make YouTube Videos&lt;/li>
&lt;/ul>
&lt;h2 id="lets-go">Let&amp;rsquo;s Go&lt;/h2>
&lt;p>Let us begin this journey and learn as we go. The start may not be great, but you have to start to be great.&lt;/p>
&lt;hr>
&lt;p>If you are interested, I created a track 7 years ago called &lt;a href="https://soundcloud.com/rex_official/lets-go-rex">Let&amp;rsquo;s Go&lt;/a>&lt;/p></content></item><item><title>Go</title><link>/notes/go/</link><pubDate>Thu, 24 Aug 2023 00:00:00 +0000</pubDate><guid>/notes/go/</guid><description>Go is a programming language that focuses on simplicity and speed. It&amp;rsquo;s simpler than other langauges, so it&amp;rsquo;s quicker to learn. And it lets you harness the power of today&amp;rsquo;s multicore computer processor, so your programs run faster.
History of Go Back in 2007, the serach engine Google had a problem. They had to maintain programs with millions of line of code. Before they could test new changes, they had to compile the code into runnable form, a process which at the time took the better part of an hour.</description><content>&lt;hr>
&lt;p>Go is a programming language that focuses on simplicity and speed. It&amp;rsquo;s simpler than other langauges, so it&amp;rsquo;s quicker to learn. And it lets you harness the power of today&amp;rsquo;s multicore computer processor, so your programs run faster.&lt;/p>
&lt;h2 id="history-of-go">History of Go&lt;/h2>
&lt;p>Back in 2007, the serach engine Google had a problem. They had to maintain programs with millions of line of code. Before they could test new changes, they had to compile the code into runnable form, a process which at the time took the better part of an hour. Needless to say, this was bad for developer productivity.&lt;/p>
&lt;p>So Google engineers &lt;strong>Robert Griesemer, Rob Pike, and Ken Thompson&lt;/strong> sketeched out some goals for a new language:&lt;/p>
&lt;ul>
&lt;li>Fast Compilation&lt;/li>
&lt;li>Less cumbersome code&lt;/li>
&lt;li>Unused memory freed automatically (garbage collection)&lt;/li>
&lt;li>Easy-to-write software that does serveal operations simultaneously (concurrency)&lt;/li>
&lt;li>Good support for processor with multiple cores&lt;/li>
&lt;/ul>
&lt;p>After a couple years of work, Google had created Go: a lanaguage that was fast to write code for and produced programs that were fast to compile and run. The project switched to an open source license in 2009. It&amp;rsquo;s now free for anyone to use.&lt;/p>
&lt;p>If you&amp;rsquo;re writing a command-line tool, Go can produce executeable files for Windows, MacOS, and Linux, all from the same source code. If you&amp;rsquo;re writing a web server, it can help you handle many users connecting at once. And no matter what you&amp;rsquo;re what you&amp;rsquo;re writing, it will help you ensure that your code is easir to maintain.&lt;/p>
&lt;h2 id="syntax-basics">Syntax Basics&lt;/h2>
&lt;h3 id="go-playground">Go Playground&lt;/h3>
&lt;p>The easiest way to try Go is to visit &lt;a href="https://go.dev/play">Go Playground&lt;/a> in your web browser. It is simple editor where you can enter Go code and run it on their servers. The result is displayed right there in your browser.&lt;/p>
&lt;blockquote>
&lt;p>Note: Go Playground requires stable internet connection. If you don&amp;rsquo;t, see &lt;a href="https://go.dev/doc/install">Intall Go&lt;/a> on your system.&lt;/p>
&lt;/blockquote>
&lt;p>Let&amp;rsquo;s try out play ground:&lt;/p>
&lt;ol>
&lt;li>Open &lt;a href="https://go.dev/play">Go Playground&lt;/a> in your browser.&lt;/li>
&lt;li>There will be hello world program already written.&lt;/li>
&lt;li>Click the Format button, which will automatically reformat your code according to Go conventions.&lt;/li>
&lt;li>Click the Run button.&lt;/li>
&lt;/ol>
&lt;p>You should see &amp;ldquo;Hello, World!&amp;rdquo; displayed at the bottom of the screen.&lt;/p>
&lt;p>Congratulations, you&amp;rsquo;ve just run your first Go program🥳!&lt;/p>
&lt;h3 id="go-file-layout">Go file layout&lt;/h3>
&lt;p>Now let&amp;rsquo;s look at the code and figure out what it actually means&amp;hellip;&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;div class="collapsable-code">
&lt;input id="897521634" type="checkbox" />
&lt;label for="897521634">
&lt;span class="collapsable-code__language">go&lt;/span>
&lt;span class="collapsable-code__title">Hello World&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-go" >&lt;code>
package main
import &amp;#34;fmt&amp;#34;
func main() {
fmt.Println(&amp;#34;Hello, World&amp;#34;)
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;!-- raw HTML omitted -->
&lt;p>Every Go file has three sections:&lt;/p>
&lt;ol>
&lt;li>The &lt;code>package&lt;/code> clause&lt;/li>
&lt;li>Any &lt;code>import&lt;/code> statements&lt;/li>
&lt;li>The actual code&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;code>Package&lt;/code> : A package is a collection of code that all does similar things, like fomatting strings or drawing images. The package clause gives the name of the package that this file&amp;rsquo;s code will become a part of. In this case, we use the special package &lt;code>main&lt;/code>, which is required if this code is going to be run directly (usually from the terminal).&lt;/li>
&lt;li>&lt;code>import&lt;/code> : Go files almost always have one or more &lt;code>import&lt;/code> statements. Each file needs to &lt;code>import&lt;/code> other packages before its code can use the code those other packages contain. Loading all the Go code on your computer at once would result in a big, slow program, so instead you specify only the package you need by importing them.&lt;/li>
&lt;li>&lt;code>actual code&lt;/code> : The last part of every Go file is the actual code, which is often split up into one or more functions. A &lt;code>function&lt;/code> is a group of code that you &lt;code>call (run)&lt;/code> from other places in your program. When a Go program is run, it looks for a function named &lt;code>main&lt;/code> and runs that first, which is why we need this function &lt;code>main&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>Below is the code with what it does in comments:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;div class="collapsable-code">
&lt;input id="394752168" type="checkbox" />
&lt;label for="394752168">
&lt;span class="collapsable-code__language">go&lt;/span>
&lt;span class="collapsable-code__title">Hello World&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-go" >&lt;code>
// This line says the rest of the code in
// this file belongs to the &amp;#34;main&amp;#34; package
package main
// This says we will be using text-formatting
// code from the &amp;#34;fmt&amp;#34; package
import &amp;#34;fmt&amp;#34;
// The &amp;#34;main&amp;#34; function is special; it gets run
// first when your program runs.
func main() {
// This line diplays (&amp;#34;print&amp;#34;) &amp;#34;Hello, World&amp;#34; in
// your terminal (or web browser, if you&amp;#39;re using the Go Playground)
//
// It does this by calling the &amp;#34;Println&amp;#34; function
// from the &amp;#34;fmt&amp;#34; package
fmt.Println(&amp;#34;Hello, World&amp;#34;)
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;code>Function&lt;/code> : A function is a group of one or more lines of code that you can call (run) from other places in your program.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Note: When a Go program is run, it looks for a function named &lt;code>main&lt;/code> and runs that first.&lt;/p>
&lt;/blockquote>
&lt;h3 id="no-semicolons">No Semicolons&lt;/h3>
&lt;p>As you can see in our program ther are no semicolons to seperate statements in Go, we can use semicolons but it&amp;rsquo;s not required (in fact, it&amp;rsquo;s generally frowned upon).&lt;/p>
&lt;p>Like &lt;a href="https://en.wikipedia.org/wiki/C_(programming_language)">C&lt;/a>, Go&amp;rsquo;s formal grammer uses semicolons to terminate statements, but unlike in &lt;a href="https://en.wikipedia.org/wiki/C_(programming_language)">C&lt;/a>, those semicolons do not appear in the source. Instead the &lt;a href="https://en.wikipedia.org/wiki/Lexical_analysis">lexer&lt;/a> uses a simple rule to insert semicolons automatically as it scans, so the input text is mostly free of them.&lt;/p>
&lt;p>If you want to know more how it works you check Go&amp;rsquo;s official doc
&lt;a href="https://go.dev/doc/effective_go#semicolons">https://go.dev/doc/effective_go#semicolons&lt;/a>&lt;/p>
&lt;h3 id="formatting">Formatting&lt;/h3>
&lt;p>Formatting issues are the most contentious but the least important. People may prefer different formatting styles, thus when another developer or person reads the same code it may take some time for him to grasp if he is not accustomed to the same formatting style. It will be easier if everyone formats their documents in the same way.&lt;/p>
&lt;p>With Go we take an unusual approch and let the machine take care of most formatting issues. The Go compiler comes with a standard formatting tool, called &lt;code>go fmt&lt;/code>. The &lt;code>go fmt&lt;/code> program reads a Go program and emits the source in a &lt;strong>&lt;em>standerd style of indentation and vertical alignment, retaining and if necessary reformatting comments.&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Next time whenever you share your code, other Go developers will expect it to be in the standard Go format. &lt;em>With Go all you have to do is run &lt;code>go fmt&lt;/code>&lt;/em>.&lt;/p>
&lt;p>If you want to try its simple version, head over to the &lt;a href="https://go.dev/play">Go playground&lt;/a>, write some buggy or unformatted code, and hit the &lt;code>format&lt;/code> button.&lt;/p>
&lt;h3 id="comments">Comments&lt;/h3>
&lt;p>Go provides C style &lt;code>/* */&lt;/code> block comments and C++ style &lt;code>//&lt;/code> line comments. Most block comments appear as package comments but are useful within an expression or to disable large blocks of code; Otherwise usually line comments are used.&lt;/p>
&lt;p>Comments that appear before a top-level declaration, with no intervening newlines, are considered to document the declaration itself. For example: In the above &lt;code>Hello World&lt;/code> programme with comments, all comments will be used in &lt;code>Go Documents&lt;/code>. These &lt;code>doc comments&lt;/code> are the primary documentation for given Go package or command.&lt;/p>
&lt;p>For more about doc comments, see &lt;a href="https://go.dev/doc/comment">Go Doc Comments&lt;/a>.&lt;/p>
&lt;h3 id="functions">Functions&lt;/h3>
&lt;h3 id="data-types">Data Types&lt;/h3></content></item><item><title>OAuth2 and OpenID Connect</title><link>/notes/oauth2/</link><pubDate>Sun, 20 Aug 2023 00:00:00 +0000</pubDate><guid>/notes/oauth2/</guid><description>OAuth 2.0 OAuth 2.0 is an open authorization protocol, which enables application to access each other&amp;rsquo;s data. OAuth 2.0 does not share password data but instead uses authorization tokens to prove an identity between consumers and service providers. In simple term it uses authorization process to jump from one service to another without tapping in a new username and password. If you&amp;rsquo;re logged into Google and used those credntials for any app (Sign with Google), you&amp;rsquo;ve used OAuth.</description><content>&lt;h2 id="oauth-20">OAuth 2.0&lt;/h2>
&lt;p>OAuth 2.0 is an open authorization protocol, which enables application to access each other&amp;rsquo;s data. OAuth 2.0 does not share password data but instead uses authorization tokens to prove an identity between consumers and service providers. In simple term it uses authorization process to jump from one service to another without tapping in a new username and password. If you&amp;rsquo;re logged into Google and used those credntials for any app (Sign with Google), you&amp;rsquo;ve used OAuth.&lt;/p>
&lt;p>OAuth2 is the industry-standard protocol that enables secure machine-to-machine communication and grants limited access to data and services on behalf of users. The specification also covers delegated access to client types such as browser-based, server-side web, native/mobile apps, and connected devices.&lt;/p>
&lt;p>OAuth was originally designed for applications to get access to API&amp;rsquo;s (All they need to ability to access the API). OAuth doesn&amp;rsquo;t communicate with user information. OpenID communicate with user information.&lt;/p>
&lt;h2 id="oauth-20-actors">OAuth 2.0 Actors&lt;/h2>
&lt;p>OAuth 2.0 has different actors defined in the authentication and authorization process. These actors work together to ensure that the user&amp;rsquo;s information is kept secure and that the application only accesses the information that the user has explicitly granted permission for.&lt;/p>
&lt;figure class="center" >
&lt;img src="https://images2.imgbox.com/4d/c6/rYoOV6yD_o.png" alt="actors" style="border-radius: 8px;" />
&lt;figcaption class="center" >OAuth2 Actors&lt;/figcaption>
&lt;/figure></content></item><item><title>About</title><link>/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/about/</guid><description>Hi there Hello, I am Rushi Panchariya. I&amp;rsquo;m Software Engineer with passion for Gaming 🎮, Coding 👨‍💻 and Music 🎧.
I&amp;rsquo;m always excited to work on new technologies and learn more about them. I am excited to work on a project that will benefit the community and assist them address their difficulties in whatever manner possible. When I&amp;rsquo;m working on a project, a concept, or a task, I&amp;rsquo;m always intrigued about the outcome.</description><content>&lt;h1 id="hi-there-hahahugoshortcode4s0hbhb">Hi there
&lt;img src="/img/pikachu-running.gif" class="left" style="width: 50px;" />
&lt;/h1>
&lt;p>Hello, I am Rushi Panchariya. I&amp;rsquo;m &lt;strong>Software Engineer&lt;/strong> with passion for Gaming 🎮, Coding 👨‍💻 and Music 🎧.&lt;/p>
&lt;p>I&amp;rsquo;m always excited to work on new technologies and learn more about them. I am excited to work on a project that will benefit the community and assist them address their difficulties in whatever manner possible. When I&amp;rsquo;m working on a project, a concept, or a task, I&amp;rsquo;m always intrigued about the outcome.&lt;/p>
&lt;p>Feel free to visit my &lt;a href="https://github.com/imrushi">GitHub&lt;/a>.&lt;/p>
&lt;p>So, there you have it&amp;hellip; enjoy!&lt;/p></content></item><item><title>Projects</title><link>/projects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/</guid><description>Shopey Collabortive Project
Quickly capture what’s on your mind and create your shopping list. Record voice memos while on the move and have them automatically transcribed. Shopey makes it easy to capture a list for yourself, and share it with friends and family. Developed using Flutter and Java, with Google Firebase utilized for the database, hosting, and Google functions. CLI VSCode Extension Open-Source Contributor
Played a key role in the early stages of an open‐source Visual Studio Code extension development, aimed at enabling seamless interaction with Ory projects and services.</description><content>&lt;h2 id="shopeyhttpsplaygooglecomstoreappsdetailsidcomd2r2shopey">&lt;a href="https://play.google.com/store/apps/details?id=com.D2R2.shopey">Shopey&lt;/a>&lt;/h2>
&lt;p>&lt;strong>&lt;em>Collabortive Project&lt;/em>&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Quickly capture what’s on your mind and create your shopping list.&lt;/li>
&lt;li>Record voice memos while on the move and have them automatically transcribed.&lt;/li>
&lt;li>Shopey makes it easy to capture a list for yourself, and share it with friends and family.&lt;/li>
&lt;li>Developed using Flutter and Java, with Google Firebase utilized for the database, hosting, and Google functions.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="cli-vscode-extensionhttpsgithubcomvinckrcli-vscode-extension">&lt;a href="https://github.com/vinckr/cli-vscode-extension">CLI VSCode Extension&lt;/a>&lt;/h2>
&lt;p>&lt;strong>&lt;em>Open-Source Contributor&lt;/em>&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Played a key role in the early stages of an open‐source Visual Studio Code extension development, aimed at enabling seamless interaction with &lt;a href="https://github.com/ory">Ory&lt;/a> projects and services.&lt;/li>
&lt;li>Proposed and contributed to the concept of the extension, providing valuable input to the organization.&lt;/li>
&lt;li>Currently involved in the development of 7 to 8 commands for the extension, with ongoing contributions to enhance its functionality.&lt;/li>
&lt;li>Collaborating with a team of developers to ensure compatibility, functionality, and an optimal user experience.&lt;/li>
&lt;li>Project is currently in progress, with no specific release date set at this stage.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="datreehttpsgithubcomdatreeiodatreepullsqis3apris3aclosedauthor3aimrushi">&lt;a href="https://github.com/datreeio/datree/pulls?q=is%3Apr+is%3Aclosed+author%3Aimrushi">Datree&lt;/a>&lt;/h2>
&lt;p>&lt;strong>&lt;em>Open-Source Contributor&lt;/em>&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Datree is Open‐Source tool to prevent Kubernetes Misconfiguration.&lt;/li>
&lt;li>It automatically validates Kubernetes objects for rule violations, ensuring no misconfigurations reach production. It’s an E2E policy enforcement solution that can be used on the command line, admission webhook, or even as a kubectl plugin.&lt;/li>
&lt;li>Contributed two CLI commands: completion and Docs. The completion command enables auto‐completion of sub‐commands upon double‐
tab, while the Docs command opens the documentation website in the user’s default browser.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="pothole-detector-using-iothttpsgithubcomimrushipothole-detector">&lt;a href="https://github.com/imrushi/Pothole-detector">Pothole Detector Using IoT&lt;/a>&lt;/h2>
&lt;p>&lt;strong>&lt;em>Collabortive Project&lt;/em>&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>This project utilizes an IoT device mounted on a moped, bike, or car to detect and identify potholes on the road.&lt;/li>
&lt;li>The system locates the potholes and displays their locations on Maps.&lt;/li>
&lt;li>The project was implemented using the ELK (Elasticsearch, Logstash, Kibana) stack and Python.&lt;/li>
&lt;li>Raspberry Pi monitoring was achieved using Elastic Metricbeat.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="geo-dndhttpsgithubcomimrushigeo-dnd">&lt;a href="https://github.com/imrushi/Geo-DnD">Geo DnD&lt;/a>&lt;/h2>
&lt;p>&lt;strong>&lt;em>Collabortive Project&lt;/em>&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>This is an Android app built with Java.&lt;/li>
&lt;li>The app allows users to set a radius for a circle and select a location from Google Maps. Additionally, they can choose a mobile mode, such as general, silent, dnd, and more.&lt;/li>
&lt;li>Once the user enters the designated circle, the mode is automatically set accordingly. When the user is outside the set radius, the phone
switches to general mode.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>There are more projects which you can find on my &lt;a href="https://github.com/imrushi?tab=repositories">GitHub&lt;/a> 😊&lt;/strong>&lt;/p>
&lt;/blockquote></content></item></channel></rss>