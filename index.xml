<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rushi Panchariya</title><link>/</link><description>Recent content on Rushi Panchariya</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Go: Basics and a Dash of Clean Code</title><link>/posts/go-basics-and-a-dash-of-clean-code/</link><pubDate>Sun, 03 Sep 2023 19:31:57 +0530</pubDate><guid>/posts/go-basics-and-a-dash-of-clean-code/</guid><description>If you have read my first blog Let&amp;rsquo;s Go, which is not about the Go programming language, go check it out 😅. You can easily tell how much I am obsessed with the Go programming language. After writing my first blog, I have done some thinking, like where to start my Go programming series blog. I have done some research and collected some notes.
As you read the heading of the blog, I will cover some of the basics that I think are important for anyone starting a programming language that also follows some of the principles of clean code.</description><content>&lt;hr>
&lt;p>If you have read my first blog &lt;a href="/posts/lets-go/">Let&amp;rsquo;s Go&lt;/a>, which is not about the Go programming language, go check it out 😅. You can easily tell how much I am obsessed with the Go programming language. After writing my first blog, I have done some thinking, like where to start my Go programming series blog. I have done some research and collected some &lt;a href="/notes/go/">notes&lt;/a>.&lt;/p>
&lt;p>As you read the heading of the blog, I will cover some of the basics that I think are important for anyone starting a programming language that also follows some of the principles of clean code. The topics that I have covered in this blog are the effective way you write your Go code and questions that arise in my mind when I have studied Golang, like why there are different types of variable declarations. Why have they created the Go programming language?&lt;/p>
&lt;p>Let&amp;rsquo;s find the answer&amp;rsquo;s:&lt;/p>
&lt;img src="https://media.giphy.com/media/18JYFP4HONtyNUmYSN/giphy.gif" alt="lets find out" class="center" style="border-radius: 8px; width: 480px; height: 270px;" />
&lt;h2 id="history-of-go">History of Go&lt;/h2>
&lt;p>The Google search engine experienced an issue back in 2007. Programs containing millions of lines of code needed to be maintained. They had to make this code into a runable program first, which took them about an hour at the time, before they could experiment with any fresh changes. String processing is Google&amp;rsquo;s additional issue. Numerous text files, or web pages, are read and analyzed by Google. This was obviously not good for the developers because it made them less productive.&lt;/p>
&lt;p>So Google engineers &lt;a href="https://en.wikipedia.org/wiki/Robert_Griesemer">Robert Griesemer&lt;/a>, &lt;a href="https://en.wikipedia.org/wiki/Rob_Pike">Rob Pike&lt;/a>, and &lt;a href="https://en.wikipedia.org/wiki/Ken_Thompson">Ken Thompson&lt;/a> sketeched out some goals for a new language:&lt;/p>
&lt;ul>
&lt;li>Fast Compilation (Efficiency)&lt;/li>
&lt;li>Less cumbersome code (Simplicity)&lt;/li>
&lt;li>Unused memory freed automatically (Grabage Collection)&lt;/li>
&lt;li>Easy-to-write software that does several oeprations simultaneously (Concurrency)&lt;/li>
&lt;li>Good support for processor with multiple cores&lt;/li>
&lt;/ul>
&lt;p>After a couple years of work, Google had created Go: a lanaguage that was fast to write code and produced programs that were fast to compile and run. Google built a rich library of string functions into Go, Grabage Collecting makes strings in Go simple to think about, and efficinet in ways some other string libraries are not. The project switched to an open source license in 2009. It’s now free for anyone to use.&lt;/p>
&lt;p>If you&amp;rsquo;re developing a command-line tool in Go, you can generate executable files for Windows, MacOS, and Linux using the same source code. If you&amp;rsquo;re building a web server, Go can assist you in efficiently managing multiple simultaneous user connections. Regardless of your project&amp;rsquo;s nature, Go will aid you in making your code easier to maintain.&lt;/p>
&lt;hr>
&lt;p>Let&amp;rsquo;s start with sytanx and clean code principles :&lt;/p>
&lt;h2 id="go-file-layout">Go file layout&lt;/h2>
&lt;p>Now let’s look at the code and figure out what it actually means…&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;div class="collapsable-code">
&lt;input id="826531947" type="checkbox" />
&lt;label for="826531947">
&lt;span class="collapsable-code__language">go&lt;/span>
&lt;span class="collapsable-code__title">Hello World&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-go" >&lt;code>
package main
import &amp;#34;fmt&amp;#34;
func main() {
fmt.Println(&amp;#34;Hello, World&amp;#34;)
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;!-- raw HTML omitted -->
&lt;p>Every Go file has three sections:&lt;/p>
&lt;ol>
&lt;li>The &lt;code>package&lt;/code> clause&lt;/li>
&lt;li>Any &lt;code>import&lt;/code> statements&lt;/li>
&lt;li>The actual &lt;code>code&lt;/code>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>&lt;code>Package&lt;/code> : A package in Go is a way to organize and structure code into meaningful units, helping with code organization and reusability. It allows control over visibility, promoting encapsulation and dependency management. The &lt;code>main&lt;/code> package serves as the entry point for Go programs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>import&lt;/code> : Go files almost always have one or more &lt;code>import&lt;/code> statements. In Go, the &lt;code>import&lt;/code> statement is used to bring in external packages that your code relies on. It ensures that your program loads only the necessary packages, making it faster and more efficient than loading everything at once.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>actual code&lt;/code> : The last part of every Go file is the actual code, which is often split up into one or more functions. A &lt;code>function&lt;/code> is a group of code that you &lt;code>call (run)&lt;/code> from other places in your program. When a Go program is run, it looks for a function named &lt;code>main&lt;/code> and runs that first, which is why we need this function &lt;code>main&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Below is the code with what it does in comments:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;div class="collapsable-code">
&lt;input id="976534182" type="checkbox" />
&lt;label for="976534182">
&lt;span class="collapsable-code__language">go&lt;/span>
&lt;span class="collapsable-code__title">Hello World&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-go" >&lt;code>
// This line says the rest of the code in
// this file belongs to the &amp;#34;main&amp;#34; package
package main
// This says we will be using text-formatting
// code from the &amp;#34;fmt&amp;#34; package
import &amp;#34;fmt&amp;#34;
// The &amp;#34;main&amp;#34; function is special; it gets run
// first when your program runs.
func main() {
// This line diplays (&amp;#34;print&amp;#34;) &amp;#34;Hello, World&amp;#34; in
// your terminal (or web browser, if you&amp;#39;re using the Go Playground)
//
// It does this by calling the &amp;#34;Println&amp;#34; function
// from the &amp;#34;fmt&amp;#34; package
fmt.Println(&amp;#34;Hello, World&amp;#34;)
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;code>Function&lt;/code> : A function is a group of one or more lines of code that you can call (run) from other places in your program.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Note: When a Go program is run, it looks for a function named &lt;code>main&lt;/code> and runs that first.&lt;/p>
&lt;/blockquote>
&lt;h2 id="no-semicolons">No Semicolons&lt;/h2>
&lt;p>As you can see in our program, there are no semicolons to separate statements in Go; we can use semicolons, but it’s not required (in fact, it’s generally frowned upon). This design choice was made to enhance code readability and reduce the potential for common programming errors.&lt;/p>
&lt;p>Like &lt;a href="https://en.wikipedia.org/wiki/C_(programming_language)">C&lt;/a>, Go&amp;rsquo;s formal grammar uses semicolons to terminate statements, but unlike in &lt;a href="https://en.wikipedia.org/wiki/C_(programming_language)">C&lt;/a>, those semicolons do not appear in the source. Instead, the &lt;a href="https://en.wikipedia.org/wiki/Lexical_analysis">lexer&lt;/a> uses a simple rule to insert semicolons automatically as it scans, so the input text is mostly free of them.&lt;/p>
&lt;h3 id="how-does-it-know-when-to-add-semicolons">How does it know when to add semicolons?&lt;/h3>
&lt;p>The rule is this: If a line ends with an identifier (like words such as &lt;code>int&lt;/code> or &lt;code>float64&lt;/code>), a basic value such as a number or a string, or certain specific tokens like&lt;/p>
&lt;p>&lt;code>break continue fallthrough return ++ -- ) }&lt;/code>&lt;/p>
&lt;p>The Go lexer then adds a semicolon after that token when it encounters a newline, which is &lt;code>\n&lt;/code>.&lt;/p>
&lt;p>To put it simply, when there&amp;rsquo;s a chance that a newline could end a statement, Go automatically inserts a semicolon.&lt;/p>
&lt;p>One consequence of the semicolon insertion rules is that you cannot put the opening brace of a control structure like &lt;code>if&lt;/code>, &lt;code>for&lt;/code>, &lt;code>switch&lt;/code>, or &lt;code>select&lt;/code> on the new line. If you do, a semicolon will be inserted before the brace, which could cause unwanted effects. So write them like below:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;div class="collapsable-code">
&lt;input id="428536197" type="checkbox" />
&lt;label for="428536197">
&lt;span class="collapsable-code__language">go&lt;/span>
&lt;span class="collapsable-code__title">if statement&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-go" >&lt;code>
if i &amp;lt; f() {
g()
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;!-- raw HTML omitted -->
&lt;p>not like this:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;div class="collapsable-code">
&lt;input id="614823975" type="checkbox" />
&lt;label for="614823975">
&lt;span class="collapsable-code__language">go&lt;/span>
&lt;span class="collapsable-code__title">bad if statement&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-go" >&lt;code>
if i &amp;lt; f() // wrong!
{ // wrong!
g()
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;!-- raw HTML omitted -->
&lt;h2 id="formatting">Formatting&lt;/h2>
&lt;p>Formatting issues are the most contentious but the least important. People may prefer different formatting styles, so when another developer or person reads the same code, it may take some time for them to grasp if he is not accustomed to the same formatting style. It will be easier if everyone formats their documents the same way.&lt;/p>
&lt;p>Go takes an unusual approach and lets the machine take care of most formatting issues. The Go compiler comes with a standard formatting tool called &lt;code>go fmt&lt;/code>. This tool reads a Go programe and automatically formats it with consistent indentation, alignment, and comment retention or adjustment to match a standard style.&lt;/p>
&lt;p>Next time, whenever you share your code, other Go developers will expect it to be in the standard Go format. With &lt;strong>&lt;em>Go, all you have to do is run &lt;code>go fmt&lt;/code>&lt;/em>&lt;/strong>.&lt;/p>
&lt;p>If you want to try its simple version, head over to the &lt;a href="https://go.dev/play">Go playground&lt;/a>, write some unformatted code, and hit the &lt;code>format&lt;/code> button.&lt;/p>
&lt;h2 id="comments">Comments&lt;/h2>
&lt;p>In Go, developers write text annotations within the source code as comments. These annotations are not executed by the program but serve as notes, explanations, or documentation. Comments are essential for providing context, making code more understandable, and documenting code for future reference.&lt;/p>
&lt;p>Go provides C-style &lt;code>/* */&lt;/code> block comments and C++-style &lt;code>//&lt;/code> line comments.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Single-line comments&lt;/strong>: Single-line comments start with two slashes &lt;code>//&lt;/code> and continue until the end of the line. They are used for adding brief explanations or clarifications to a specific line of code.&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;div class="collapsable-code">
&lt;input id="285364197" type="checkbox" />
&lt;label for="285364197">
&lt;span class="collapsable-code__language">go&lt;/span>
&lt;span class="collapsable-code__title">Single-line comment&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-go" >&lt;code>
// This is a single-line comment in Go.
var x int // This comment explains the purpose of the variable.
&lt;/code>&lt;/pre>
&lt;/div>
&lt;!-- raw HTML omitted -->
&lt;ol start="2">
&lt;li>&lt;strong>Multi-line comments&lt;/strong>: Multi-line comments are enclosed within &lt;code>/*&lt;/code> and &lt;code>*/&lt;/code> and can span multiple lines. They are commonly used for documenting larger sections of code, writing package-level documentation, or providing more detailed explanations.&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;div class="collapsable-code">
&lt;input id="438627951" type="checkbox" />
&lt;label for="438627951">
&lt;span class="collapsable-code__language">go&lt;/span>
&lt;span class="collapsable-code__title">Multi-line comment&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-go" >&lt;code>
/*
This is a multi-line comment in Go.
It can span multiple lines and is useful for providing
detailed explanations or comments for larger code blocks.
*/
&lt;/code>&lt;/pre>
&lt;/div>
&lt;!-- raw HTML omitted -->
&lt;p>Go also has a convention for documenting exported (public) identifiers and packages using special comments, often referred to as &amp;ldquo;comment annotations&amp;rdquo; or &amp;ldquo;comments for the &lt;code>godoc&lt;/code> tool&amp;rdquo;. These comments are structured in a way that allows the godoc tool to automatically generate documentation based on them.&lt;/p>
&lt;p>For documenting exported identifiers, you can use a comment placed directly before the identifier, starting with the identifier name and a brief description:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;div class="collapsable-code">
&lt;input id="687351249" type="checkbox" />
&lt;label for="687351249">
&lt;span class="collapsable-code__language">go&lt;/span>
&lt;span class="collapsable-code__title">Sample Go Doc Comment&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-go" >&lt;code>
// MyFunction is a public function that performs a specific task.
func MyFunction() {
// Function implementation...
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;!-- raw HTML omitted -->
&lt;p>For package-level documentation, you can include a comment at the top of the file:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;div class="collapsable-code">
&lt;input id="457291368" type="checkbox" />
&lt;label for="457291368">
&lt;span class="collapsable-code__language">go&lt;/span>
&lt;span class="collapsable-code__title">Package level doc comment&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-go" >&lt;code>
// Package mypackage provides functionality for...
package mypackage
import &amp;#34;fmt&amp;#34;
// ExportedFunction is a function that...
func ExportedFunction() {
// Function implementation...
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;!-- raw HTML omitted -->
&lt;p>To generate documentation from these comments, you can use the godoc command-line tool. Running godoc on your Go code will produce documentation that includes your comments, making it easier for others to understand and use your code. Properly documented code is not only more understandable but also encourages collaboration and code maintenance.&lt;/p>
&lt;h2 id="names">Names&lt;/h2>
&lt;img src="https://media0.giphy.com/media/3orieQcuSiWouzdHq0/giphy.webp" alt="names" class="center" style="border-radius: 8px; width: 320px; height: 230px;" />
&lt;p>Names are as important in Go as in any other language. When coding, we should consider naming variables, functions, arguments, classes, packages, source files, and directories that contain those source files.&lt;/p>
&lt;blockquote>
&lt;p>According to the book &lt;code>Clean Code&lt;/code> by &lt;code>Robert C. Martin&lt;/code>, there are some standards for naming:&lt;/p>
&lt;ol>
&lt;li>Choose descriptive and unambiguous names.&lt;/li>
&lt;li>Make a meaningful distinction.&lt;/li>
&lt;li>Use pronounceable names.&lt;/li>
&lt;li>Use searchable names.&lt;/li>
&lt;li>Replace magic numbers with named constants.&lt;/li>
&lt;li>Avoid encodings. Don&amp;rsquo;t append prefixes or type information.&lt;/li>
&lt;/ol>
&lt;p>You can check this points in detail in this &lt;a href="https://medium.com/@pabashani.herath/clean-code-naming-conventions-4cac223de3c6">blog&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Go has one simple set of rules that apply to the names of variables, functions, and types:&lt;/p>
&lt;ul>
&lt;li>A name must begin with a letter and can have any number of additional letters and numbers.&lt;/li>
&lt;li>The following points determine the visibility of a name (variable, function, and type names) outside a package:
&lt;ul>
&lt;li>If the name of a variable, function, or type begins with a &lt;strong>&lt;em>Capital letter&lt;/em>&lt;/strong>, it is considered as &lt;strong>&lt;em>Exported&lt;/em>&lt;/strong> and can be accessed from a package outside the current one. Example - As you have seen in the above &lt;a href="#go-file-layout">hello world program&lt;/a>. The &lt;code>P&lt;/code> in &lt;code>fmt.Println&lt;/code> is capitalized: so it can be used from the main package or any other.&lt;/li>
&lt;li>If the name begins with a &lt;strong>&lt;em>Lowercase letter&lt;/em>&lt;/strong>, it is considered &lt;strong>&lt;em>Unexported&lt;/em>&lt;/strong> and can only be accessed within the current package.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Above are the only rules that are enforced in Go language. But &lt;code>Go Community&lt;/code> follows some additional conventions as well:&lt;/p>
&lt;ul>
&lt;li>When naming something in Go, like a variable or function, use &lt;a href="https://en.wikipedia.org/wiki/Camel_case">CamelCase&lt;/a>. This means that if the name has more than one word, start with a lowercase letter for the first word and then capitalize the first letter of each following word without using spaces. For example, &lt;code>topRank&lt;/code> and &lt;code>RetryConnection&lt;/code> are in CamelCase, which looks like camel humps.&lt;/li>
&lt;li>If a name&amp;rsquo;s meaning is clear from the context, it&amp;rsquo;s common to use abbreviations like &lt;code> i&lt;/code> for &lt;code>index&lt;/code> or &lt;code>max&lt;/code> for &lt;code>maximum&lt;/code> to keep the code concise and easy to read.&lt;/li>
&lt;/ul>
&lt;h3 id="mixedcaps">MixedCaps&lt;/h3>
&lt;p>The convention in Go is to use &lt;code>MixedCaps&lt;/code> or &lt;code>mixedCaps&lt;/code> rather than underscores to write multiword names.&lt;/p>
&lt;h3 id="package-name">Package Name&lt;/h3>
&lt;p>Good package names make code better. A package’s name provides context for its contents, making it easier for the developer or user to understand what the package is for and how to use it. The name also helps package maintainers determine what does and does not belong in the package as it evolves. Well-named packages make it easier to find the code you need.&lt;/p>
&lt;h4 id="package-name-guideline">Package Name Guideline&lt;/h4>
&lt;p>To make a Go package easy to use, it&amp;rsquo;s best to give it a short, clear, and meaningful single-word name. Go packages typically have lowercase names without &lt;code>under_scores&lt;/code> or &lt;code>mixed capital&lt;/code> letters. These names are often simple nouns, like:&lt;/p>
&lt;ul>
&lt;li>time (provides functionality for measuring and displaying time)&lt;/li>
&lt;li>list (implements a doubly linked list)&lt;/li>
&lt;li>http (provides HTTP client and server implementations)&lt;/li>
&lt;/ul>
&lt;p>Below are examples of bad naming styles in Go:&lt;/p>
&lt;ul>
&lt;li>computeServiceClient&lt;/li>
&lt;li>priority_queue&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;em>Abbreviate judiciously&lt;/em>&lt;/strong>. Package names may be abbreviated when the abbreviation is familiar to the programmer. Widely used packages often have compressed names:&lt;/p>
&lt;ul>
&lt;li>strconv (string conversion)&lt;/li>
&lt;li>syscall (system call)&lt;/li>
&lt;li>fmt (formatted I/O)&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Note:- If abbreviating a package name makes it ambiguous or unclear, don’t do it.&lt;/p>
&lt;/blockquote>
&lt;p>Another convention is that the package name is the base name of its source directory; the package in &lt;code>src/encoding/base64&lt;/code> is imported as &lt;code>&amp;quot;encoding/base64&amp;quot;&lt;/code> but has the name &lt;code>base64&lt;/code>, not &lt;code>encoding_base64&lt;/code> and not &lt;code>encodingBase64&lt;/code>.&lt;/p>
&lt;p>Another short example is &lt;code>once.Do&lt;/code>; &lt;code>once.Do(setup)&lt;/code> reads well and would not be improved by writing &lt;code>once.DoOrWaitUntilDone(setup)&lt;/code>. &lt;em>Long names don&amp;rsquo;t automatically make things more readable.&lt;/em> A helpful doc comment can often be more valuable than an extra-long name.&lt;/p>
&lt;h3 id="interface-names">Interface Names&lt;/h3>
&lt;p>By convention, one-method interfaces are named by the &lt;code>method name&lt;/code> plus an &lt;code>-er&lt;/code> suffix or similar modification to construct an agent noun; Reader, Writer, Formatter, CloseNotifier etc.&lt;/p>
&lt;h2 id="variable-declaration">Variable Declaration&lt;/h2>
&lt;p>In Go, a &lt;code>variable&lt;/code> is a piece of storage containing a value. You can give a variable a name by using a &lt;code>variable declaration&lt;/code>. Just use the &lt;code>var&lt;/code> keyword, followed by the desired name and the type of values the variable will hold.&lt;/p>
&lt;p>Variable declaration syntax:&lt;/p>
&lt;p>&lt;code>var name string&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>var&lt;/code> :- It is a keyword.&lt;/li>
&lt;li>&lt;code>name&lt;/code> :- It will be a variable name that you want to access in your program.&lt;/li>
&lt;li>&lt;code>string&lt;/code> :- It will be any datatype that the variable will hold data for. (Go-supported datatypes)&lt;/li>
&lt;/ul>
&lt;p>Once you declare a variable, you can assign any value of that type to it with the &lt;code>=&lt;/code> sign.&lt;/p>
&lt;p>&lt;code>var name string = &amp;quot;Jerry&amp;quot;&lt;/code>&lt;/p>
&lt;p>You can assign values to multiple variables in the same statement. Just place multiple variable names on the left side of &lt;code>=&lt;/code>, and the same number of values on the right side, separated with commas (&lt;code>,&lt;/code>).&lt;/p>
&lt;p>Syntax for assigning multiple variables at once:&lt;/p>
&lt;p>&lt;code>var length, width float64 = 1.2, 2.4&lt;/code>&lt;/p>
&lt;p>You can assign new values to existing variables, but they need to be values of the same type, like when you assign an &lt;code>int&lt;/code> variable value to a &lt;code>string&lt;/code> type variable. Go’s static typing ensures you don’t accidentally assign the wrong kind of value to a variable.&lt;/p>
&lt;h2 id="short-variable-declaration">Short Variable Declaration&lt;/h2>
&lt;p>As we saw in the above section, we can declare variables and assign them values on the same line. But if you know what the initial value of a variable is going to be as soon as you declare it, it’s more typical to use a &lt;code>short variable declaration&lt;/code>. Instead of explicitly declaring the type of the variable and later assigning it with &lt;code>=&lt;/code>, you do both at once using &lt;code>:=&lt;/code>.&lt;/p>
&lt;p>Here are our previous examples with short variable declarations :&lt;/p>
&lt;ol>
&lt;li>&lt;code>name := jerry&lt;/code> instead of &lt;code>var name string = &amp;quot;Jerry&amp;quot;&lt;/code>&lt;/li>
&lt;li>&lt;code>length, width := 1.2, 2.4&lt;/code> instead of &lt;code>var length, width float64 = 1.2, 2.4&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>There’s no need to explicitly declare the variable’s type; the type of the value assigned to the variable becomes the type of that variable.&lt;/p>
&lt;p>Because short variable declarations are so convenient and concise, they’re used more often than regular declarations. You’ll still see both forms occasionally, though, so it’s important to be familiar with both.&lt;/p>
&lt;h2 id="thanks">Thanks!!!&lt;/h2>
&lt;p>In this blog, we&amp;rsquo;ve delved into Go&amp;rsquo;s intriguing history, exploring its origins and essential conventions like formatting, comments with the godoc tool, and naming guidelines. We also demystified the absence of semicolons in Go and how they are automatically inserted.&lt;/p>
&lt;p>If you found this blog helpful or discovered something new, please consider sharing it with your connections who may benefit from a clearer understanding. If you&amp;rsquo;ve spotted any errors or have additional insights, please don&amp;rsquo;t hesitate to leave a comment below. Let&amp;rsquo;s engage in discussions and learn together.&lt;/p>
&lt;p>In my upcoming blog post, I&amp;rsquo;ll dive deeper into functions and explore various Go datatypes with practical examples.&lt;/p>
&lt;p>Once again, a big thank you for joining me on this journey. 🥳&lt;/p>
&lt;img src="https://media1.giphy.com/media/xuAq1gW0hwlREbbMU7/giphy.webp" alt="names" class="center" style="border-radius: 8px; width: 320px; height: 230px;" />
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.oreilly.com/library/view/head-first-go/9781491969540/">Head First GO&lt;/a> - Jay McGavren&lt;/li>
&lt;li>&lt;a href="https://go.dev/doc/effective_go">Effective Go&lt;/a> - Go Doc&lt;/li>
&lt;li>&lt;a href="https://www.oreilly.com/library/view/clean-code-a/9780136083238/">Clean Code&lt;/a> - Robert C. Martin&lt;/li>
&lt;/ul></content></item><item><title>Let's Go</title><link>/posts/lets-go/</link><pubDate>Fri, 25 Aug 2023 09:05:10 +0530</pubDate><guid>/posts/lets-go/</guid><description>Begin This is the new beginning and also my second blog, which is also a non-technical blog (first blog). I have decided to start writing blogs so that I can share my thoughts and knowledge and improve my writing skills. I will be writing blogs about mostly technical stuff and sometimes non-technical stuff. In technical blogs, I will cover whatever research I have done, and while doing research, I will keep my notes in the Notes section.</description><content>&lt;h2 id="begin">Begin&lt;/h2>
&lt;p>This is the new beginning and also my second blog, which is also a non-technical blog (&lt;a href="https://rushipanchariya.medium.com/how-to-use-face-api-js-for-face-detection-in-video-or-image-using-angular-fca1e4bef797">first blog&lt;/a>). I have decided to start writing blogs so that I can share my thoughts and knowledge and improve my writing skills. I will be writing blogs about mostly technical stuff and sometimes non-technical stuff. In technical blogs, I will cover whatever research I have done, and while doing research, I will keep my notes in the &lt;a href="/notes/">Notes section&lt;/a>.&lt;/p>
&lt;h2 id="plan-and-present">Plan and Present&lt;/h2>
&lt;p>As of now, I don’t have a full plan for what I am going to write, which topics I will cover, or where it will go. But I remember a quote that says to &lt;code>go with the flow and be more concerned with the journey than the destination&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;A good traveler has no fixed plans, and is not intent on arriving.&amp;rdquo; - Lao Tzu&lt;/p>
&lt;/blockquote>
&lt;p>To start with, I will be writing blogs about &lt;a href="https://go.dev/">Golang&lt;/a>, which I am currently obsessed with.&lt;/p>
&lt;p>As said, I am currently obsessed with Golang, like how it internally works and all. I will start with its basics, and as I go along with my research, I will dig down into how Golang works internally. I am more curious to do research on its internal workings and its concurrency. I will try to explain all the things in an easy way (I hope so 😬).&lt;/p>
&lt;p>As I go with blogs, I will create YouTube videos for the same on my channel. I have lots of project ideas that I will create as an example, and if it is an interesting idea or helpful, I will make it open-source, or you guys can start contributing your ideas to the project.&lt;/p>
&lt;p>From my contribution, I have remembered how I struggled with starting to contribute to open-source projects. So definitely, I will write a blog about how to get started with open source. Also,share my experience with it. As of now,I am contributing to &lt;a href="https://github.com/ory/cli-vscode-extension">vscode-extension&lt;/a> for &lt;a href="https://ory.sh">ORY&lt;/a> organization, which mostly provides solutions in the areas of authentication, authorization, access control, and zero-trust networking with their open-source projects. I will create a new tab where I can keep track of the ideas.&lt;/p>
&lt;p>So my plan will be, in short:&lt;/p>
&lt;ul>
&lt;li>Research on the topic&lt;/li>
&lt;li>Add to &lt;a href="/notes/">Notes&lt;/a>&lt;/li>
&lt;li>Write blog&lt;/li>
&lt;li>Make YouTube Videos&lt;/li>
&lt;/ul>
&lt;h2 id="lets-go">Let&amp;rsquo;s Go&lt;/h2>
&lt;p>Let us begin this journey and learn as we go. The start may not be great, but you have to start to be great.&lt;/p>
&lt;hr>
&lt;p>If you are interested, I created a track 7 years ago called &lt;a href="https://soundcloud.com/rex_official/lets-go-rex">Let&amp;rsquo;s Go&lt;/a>&lt;/p></content></item><item><title>Go</title><link>/notes/go/</link><pubDate>Thu, 24 Aug 2023 00:00:00 +0000</pubDate><guid>/notes/go/</guid><description>Go is a programming language that focuses on simplicity and speed. It&amp;rsquo;s simpler than other langauges, so it&amp;rsquo;s quicker to learn. And it lets you harness the power of today&amp;rsquo;s multicore computer processor, so your programs run faster.
History of Go Back in 2007, the serach engine Google had a problem. They had to maintain programs with millions of line of code. Before they could test new changes, they had to compile the code into runnable form, a process which at the time took the better part of an hour.</description><content>&lt;hr>
&lt;p>Go is a programming language that focuses on simplicity and speed. It&amp;rsquo;s simpler than other langauges, so it&amp;rsquo;s quicker to learn. And it lets you harness the power of today&amp;rsquo;s multicore computer processor, so your programs run faster.&lt;/p>
&lt;h2 id="history-of-go">History of Go&lt;/h2>
&lt;p>Back in 2007, the serach engine Google had a problem. They had to maintain programs with millions of line of code. Before they could test new changes, they had to compile the code into runnable form, a process which at the time took the better part of an hour. Needless to say, this was bad for developer productivity.&lt;/p>
&lt;p>So Google engineers &lt;strong>Robert Griesemer, Rob Pike, and Ken Thompson&lt;/strong> sketeched out some goals for a new language:&lt;/p>
&lt;ul>
&lt;li>Fast Compilation&lt;/li>
&lt;li>Less cumbersome code&lt;/li>
&lt;li>Unused memory freed automatically (garbage collection)&lt;/li>
&lt;li>Easy-to-write software that does serveal operations simultaneously (concurrency)&lt;/li>
&lt;li>Good support for processor with multiple cores&lt;/li>
&lt;/ul>
&lt;p>After a couple years of work, Google had created Go: a lanaguage that was fast to write code for and produced programs that were fast to compile and run. The project switched to an open source license in 2009. It&amp;rsquo;s now free for anyone to use.&lt;/p>
&lt;p>If you&amp;rsquo;re writing a command-line tool, Go can produce executeable files for Windows, MacOS, and Linux, all from the same source code. If you&amp;rsquo;re writing a web server, it can help you handle many users connecting at once. And no matter what you&amp;rsquo;re what you&amp;rsquo;re writing, it will help you ensure that your code is easir to maintain.&lt;/p>
&lt;h2 id="syntax-basics">Syntax Basics&lt;/h2>
&lt;h3 id="go-playground">Go Playground&lt;/h3>
&lt;p>The easiest way to try Go is to visit &lt;a href="https://go.dev/play">Go Playground&lt;/a> in your web browser. It is simple editor where you can enter Go code and run it on their servers. The result is displayed right there in your browser.&lt;/p>
&lt;blockquote>
&lt;p>Note: Go Playground requires stable internet connection. If you don&amp;rsquo;t, see &lt;a href="https://go.dev/doc/install">Intall Go&lt;/a> on your system.&lt;/p>
&lt;/blockquote>
&lt;p>Let&amp;rsquo;s try out play ground:&lt;/p>
&lt;ol>
&lt;li>Open &lt;a href="https://go.dev/play">Go Playground&lt;/a> in your browser.&lt;/li>
&lt;li>There will be hello world program already written.&lt;/li>
&lt;li>Click the Format button, which will automatically reformat your code according to Go conventions.&lt;/li>
&lt;li>Click the Run button.&lt;/li>
&lt;/ol>
&lt;p>You should see &amp;ldquo;Hello, World!&amp;rdquo; displayed at the bottom of the screen.&lt;/p>
&lt;p>Congratulations, you&amp;rsquo;ve just run your first Go program🥳!&lt;/p>
&lt;h3 id="go-file-layout">Go file layout&lt;/h3>
&lt;p>Now let&amp;rsquo;s look at the code and figure out what it actually means&amp;hellip;&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;div class="collapsable-code">
&lt;input id="845172936" type="checkbox" />
&lt;label for="845172936">
&lt;span class="collapsable-code__language">go&lt;/span>
&lt;span class="collapsable-code__title">Hello World&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-go" >&lt;code>
package main
import &amp;#34;fmt&amp;#34;
func main() {
fmt.Println(&amp;#34;Hello, World&amp;#34;)
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;!-- raw HTML omitted -->
&lt;p>Every Go file has three sections:&lt;/p>
&lt;ol>
&lt;li>The &lt;code>package&lt;/code> clause&lt;/li>
&lt;li>Any &lt;code>import&lt;/code> statements&lt;/li>
&lt;li>The actual code&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;code>Package&lt;/code> : A package is a collection of code that all does similar things, like fomatting strings or drawing images. The package clause gives the name of the package that this file&amp;rsquo;s code will become a part of. In this case, we use the special package &lt;code>main&lt;/code>, which is required if this code is going to be run directly (usually from the terminal).&lt;/li>
&lt;li>&lt;code>import&lt;/code> : Go files almost always have one or more &lt;code>import&lt;/code> statements. Each file needs to &lt;code>import&lt;/code> other packages before its code can use the code those other packages contain. Loading all the Go code on your computer at once would result in a big, slow program, so instead you specify only the package you need by importing them.&lt;/li>
&lt;li>&lt;code>actual code&lt;/code> : The last part of every Go file is the actual code, which is often split up into one or more functions. A &lt;code>function&lt;/code> is a group of code that you &lt;code>call (run)&lt;/code> from other places in your program. When a Go program is run, it looks for a function named &lt;code>main&lt;/code> and runs that first, which is why we need this function &lt;code>main&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>Below is the code with what it does in comments:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;div class="collapsable-code">
&lt;input id="692813574" type="checkbox" />
&lt;label for="692813574">
&lt;span class="collapsable-code__language">go&lt;/span>
&lt;span class="collapsable-code__title">Hello World&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-go" >&lt;code>
// This line says the rest of the code in
// this file belongs to the &amp;#34;main&amp;#34; package
package main
// This says we will be using text-formatting
// code from the &amp;#34;fmt&amp;#34; package
import &amp;#34;fmt&amp;#34;
// The &amp;#34;main&amp;#34; function is special; it gets run
// first when your program runs.
func main() {
// This line diplays (&amp;#34;print&amp;#34;) &amp;#34;Hello, World&amp;#34; in
// your terminal (or web browser, if you&amp;#39;re using the Go Playground)
//
// It does this by calling the &amp;#34;Println&amp;#34; function
// from the &amp;#34;fmt&amp;#34; package
fmt.Println(&amp;#34;Hello, World&amp;#34;)
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;code>Function&lt;/code> : A function is a group of one or more lines of code that you can call (run) from other places in your program.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Note: When a Go program is run, it looks for a function named &lt;code>main&lt;/code> and runs that first.&lt;/p>
&lt;/blockquote>
&lt;h3 id="no-semicolons">No Semicolons&lt;/h3>
&lt;p>As you can see in our program ther are no semicolons to seperate statements in Go, we can use semicolons but it&amp;rsquo;s not required (in fact, it&amp;rsquo;s generally frowned upon).&lt;/p>
&lt;p>Like &lt;a href="https://en.wikipedia.org/wiki/C_(programming_language)">C&lt;/a>, Go&amp;rsquo;s formal grammer uses semicolons to terminate statements, but unlike in &lt;a href="https://en.wikipedia.org/wiki/C_(programming_language)">C&lt;/a>, those semicolons do not appear in the source. Instead the &lt;a href="https://en.wikipedia.org/wiki/Lexical_analysis">lexer&lt;/a> uses a simple rule to insert semicolons automatically as it scans, so the input text is mostly free of them.&lt;/p>
&lt;p>If you want to know more how it works you check Go&amp;rsquo;s official doc
&lt;a href="https://go.dev/doc/effective_go#semicolons">https://go.dev/doc/effective_go#semicolons&lt;/a>&lt;/p>
&lt;h3 id="formatting">Formatting&lt;/h3>
&lt;p>Formatting issues are the most contentious but the least important. People may prefer different formatting styles, thus when another developer or person reads the same code it may take some time for him to grasp if he is not accustomed to the same formatting style. It will be easier if everyone formats their documents in the same way.&lt;/p>
&lt;p>With Go we take an unusual approch and let the machine take care of most formatting issues. The Go compiler comes with a standard formatting tool, called &lt;code>go fmt&lt;/code>. The &lt;code>go fmt&lt;/code> program reads a Go program and emits the source in a &lt;strong>&lt;em>standerd style of indentation and vertical alignment, retaining and if necessary reformatting comments.&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Next time whenever you share your code, other Go developers will expect it to be in the standard Go format. &lt;em>With Go all you have to do is run &lt;code>go fmt&lt;/code>&lt;/em>.&lt;/p>
&lt;p>If you want to try its simple version, head over to the &lt;a href="https://go.dev/play">Go playground&lt;/a>, write some buggy or unformatted code, and hit the &lt;code>format&lt;/code> button.&lt;/p>
&lt;h3 id="comments">Comments&lt;/h3>
&lt;p>Go provides C style &lt;code>/* */&lt;/code> block comments and C++ style &lt;code>//&lt;/code> line comments. Most block comments appear as package comments but are useful within an expression or to disable large blocks of code; Otherwise usually line comments are used.&lt;/p>
&lt;p>Comments that appear before a top-level declaration, with no intervening newlines, are considered to document the declaration itself. For example: In the above &lt;code>Hello World&lt;/code> programme with comments, all comments will be used in &lt;code>Go Documents&lt;/code>. These &lt;code>doc comments&lt;/code> are the primary documentation for given Go package or command.&lt;/p>
&lt;p>For more about doc comments, see &lt;a href="https://go.dev/doc/comment">Go Doc Comments&lt;/a>.&lt;/p>
&lt;h3 id="names">Names&lt;/h3>
&lt;p>Names are as important in Go as in any other language. Go has one simple set of rules that apply to the names of variables, functions, and types:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>A name must begin with letter, and can have any number of additional letters and numbers.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The visibility of a name outside a package is determined by below points:&lt;/p>
&lt;ul>
&lt;li>If the name of a variable, function, or type begins with a &lt;strong>&lt;em>Capital letter&lt;/em>&lt;/strong>, it is considered &lt;strong>&lt;em>Exported&lt;/em>&lt;/strong> and can be accessed from packages outside the current one. &lt;code>Example&lt;/code> - As you have seen in above &lt;a href="#go-file-layout">hello world program&lt;/a>. The &lt;code>P&lt;/code> in &lt;code>fmt.Println&lt;/code> is capitalized: so it can be used from the main package or any other.&lt;/li>
&lt;li>If the name begins with a &lt;strong>&lt;em>Lowercase letter&lt;/em>&lt;/strong>, it is considered &lt;strong>&lt;em>Unexported&lt;/em>&lt;/strong> and only be accessed within the current package.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Above the only rules enforced by the language. But the &lt;code>Go community&lt;/code> follows some additional conventions as well:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>If a name consists of multiple words, each word after the first should be capitalized, and they should be attached together without spaces between them, like this: &lt;strong>&lt;em>topRank, RetryConnection&lt;/em>&lt;/strong>&amp;hellip; This style is often called &lt;a href="https://en.wikipedia.org/wiki/Camel_case">Camel Case&lt;/a> because the capitalized letter look like the humps of a camel.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When the meaning of a name is obvious from the context, the Go community&amp;rsquo;s convention is to abbreviate it: to use &lt;code>i&lt;/code> instead of &lt;code>index&lt;/code>, &lt;code>max&lt;/code> instead of &lt;code>maximum&lt;/code>&amp;hellip;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="mixedcaps">MixedCaps&lt;/h4>
&lt;p>The convention in Go is to use &lt;code>MixedCaps&lt;/code> or &lt;code>mixedCaps&lt;/code> rather than underscores to write multiword names.&lt;/p>
&lt;h4 id="package-names">Package Names&lt;/h4>
&lt;p>Good pacakage names make code better. A package&amp;rsquo;s names provides context for its contents, making it easier for developer/user to understand what the package is for and how to use it. The name also helps package maintainers determine what does and does not belong in the package as it evolves. Well-named packages make it easier to find the code you need.&lt;/p>
&lt;h5 id="guideline">Guideline&lt;/h5>
&lt;p>It&amp;rsquo;s helpful if everyone using the package can the same name to refer to its contents, which implies that the package name should be good: short, concise, evocative. By convention, packages are given lower case, single-word names; there should be no need for &lt;strong>&lt;em>under_scores&lt;/em>&lt;/strong> or &lt;strong>&lt;em>mixedCaps&lt;/em>&lt;/strong>. They are often simple nouns, such as:&lt;/p>
&lt;ul>
&lt;li>time (provides functionality for measuring and displaying time)&lt;/li>
&lt;li>list (implements a doubly linked list)&lt;/li>
&lt;li>http (provides HTTP client and server implementations)&lt;/li>
&lt;/ul>
&lt;p>Below are example for bad naming styles in Go:&lt;/p>
&lt;ul>
&lt;li>computeServiceClient&lt;/li>
&lt;li>priority_queue&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;em>Abbreviate judiciously&lt;/em>&lt;/strong>. Package names may be abbreviated when the abbreviation is familiar to the programmer. Widely-used packages often have compressed names:&lt;/p>
&lt;ul>
&lt;li>strconv (string conversion)&lt;/li>
&lt;li>syscall (system call)&lt;/li>
&lt;li>fmt (formatted I/O)&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Note:- If abbreviating a package name makes it ambiguous or unclear, don’t do it.&lt;/p>
&lt;/blockquote>
&lt;p>Another convention is that the package name is the base name of its source directory; the package in &lt;code>src/encoding/base64&lt;/code> is imported as &lt;code>&amp;quot;encoding/base64&amp;quot;&lt;/code> but has name &lt;code>base64&lt;/code>, not &lt;code>encoding_base64&lt;/code> and not &lt;code>encodingBase64&lt;/code>.&lt;/p>
&lt;p>Another short example is &lt;code>once.Do&lt;/code>; &lt;code>once.Do(setup)&lt;/code> reads well and would not be improved by writing &lt;code>once.DoOrWaitUntilDone(setup)&lt;/code>. &lt;em>Long names don&amp;rsquo;t automatically make things more readable.&lt;/em> A helpful doc comment can often be more valuable than an extra long name.&lt;/p>
&lt;h4 id="interface-names">Interface Names&lt;/h4>
&lt;p>By convention, one-method interfaces are named by the &lt;code>method name&lt;/code> plus and &lt;code>-er&lt;/code> suffix or similar modification to construct an agent noun; Reader, Writer, Formatter, CloseNotifier etc.&lt;/p>
&lt;h3 id="declaration-variables">Declaration Variables&lt;/h3>
&lt;p>In Go, a &lt;code>variable&lt;/code> is a piece of storage containing a value. You can give a variable a name by using a &lt;code>variable declaration&lt;/code>. Just use the &lt;code>var&lt;/code> keyword followed by the desired name and the type of values the variable will hold.&lt;/p>
&lt;p>Variable declaration syntax:&lt;/p>
&lt;p>&lt;code>var name string&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>var&lt;/code> :- It is a keyword.&lt;/li>
&lt;li>&lt;code>name&lt;/code> :- It will be a variable name that you want to access in your programme.&lt;/li>
&lt;li>&lt;code>string&lt;/code> :- It will be any datatype that the variable will hold data for. (Go-supported datatypes)&lt;/li>
&lt;/ul>
&lt;p>Once you declare a variable, you can assign any value of that type to it with &lt;code>=&lt;/code> sign.&lt;/p>
&lt;p>&lt;code>var name string = &amp;quot;Jerry&amp;quot;&lt;/code>&lt;/p>
&lt;p>You can assign values to multiple variables in the same statement. Just place mutiple varible names on the left side of &lt;code>=&lt;/code>, and the same number of values on the right side, seprated with commas (&lt;code>,&lt;/code>).&lt;/p>
&lt;p>Syntax for assign multiple variables at once:&lt;/p>
&lt;p>&lt;code>var length, width float64 = 1.2, 2.4&lt;/code>&lt;/p>
&lt;p>You can assign new values to existing variables, but they need to be values of the same type like you can&amp;rsquo;t assign &lt;code>int&lt;/code> variable value to &lt;code>string&lt;/code> type variable. Go’s static typing ensures you don’t accidentally assign the wrong kind of value to a variable.&lt;/p>
&lt;h3 id="short-variable-declaration">Short Variable Declaration&lt;/h3>
&lt;p>As we seen in the above section we can declare variables and assign them values on the same line. But if you know what the initial value of a variable is going to be as soon as you declare it, it’s more typical to use a &lt;code>short variable declaration&lt;/code>. Instead of explicitly declaring the type of the variable and later assigning to it with &lt;code>=&lt;/code>, you do both at once using &lt;code>:=&lt;/code>.&lt;/p>
&lt;p>Here are our previous examples with short variable declaration :&lt;/p>
&lt;ol>
&lt;li>&lt;code>name := jerry&lt;/code> instead of &lt;code>var name string = &amp;quot;Jerry&amp;quot;&lt;/code>&lt;/li>
&lt;li>&lt;code>length, width := 1.2, 2.4&lt;/code> instead of &lt;code>var length, width float64 = 1.2, 2.4&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>There’s no need to explicitly declare the variable’s type; the type of the value assigned to the variable becomes the type of that variable.&lt;/p>
&lt;p>Because short variable declarations are so convenient and concise, they’re used more often than regular declarations. You’ll still see both forms occasionally, though, so it’s important to be familiar with both.&lt;/p>
&lt;h3 id="functions">Functions&lt;/h3>
&lt;p>A function is a group of statements that together perfrom a task. Function can be used to:&lt;/p>
&lt;ul>
&lt;li>Resuse code in multiple places.&lt;/li>
&lt;li>Make code more organized and readable.&lt;/li>
&lt;li>Hide implementation details.&lt;/li>
&lt;li>Improve code perfromance.&lt;/li>
&lt;/ul>
&lt;p>Functions are declared using the &lt;code>func&lt;/code> keyword, followed by the &lt;code>function name, a list of parameters, and a block of code&lt;/code>. The function body is enclosed in curly &lt;code>braces&lt;/code> (&lt;code>{&lt;/code> and &lt;code>}&lt;/code>). A function can take zero or more arguments.&lt;/p>
&lt;p>Syntax for function in Go: &lt;code>func funcName(var1 dataType, var2 dataType,... varN dataType) returnType {}&lt;/code>&lt;/p>
&lt;h4 id="creating-function-and-calling-function">Creating Function and Calling Function&lt;/h4>
&lt;p>Let&amp;rsquo;s create a sample addition program which will contains function with name &lt;code>add()&lt;/code> it will take 2 arguments &lt;code>x and y&lt;/code>. Which will be &lt;code>int&lt;/code> type and return &lt;code>int&lt;/code> (Don&amp;rsquo;t worry we will check return and data types next sections.).&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;div class="collapsable-code">
&lt;input id="241537968" type="checkbox" />
&lt;label for="241537968">
&lt;span class="collapsable-code__language">go&lt;/span>
&lt;span class="collapsable-code__title">Addition Function&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-go" >&lt;code>
package main
import &amp;#34;fmt&amp;#34;
func add(x, y int) int {
return x &amp;#43; y
}
func main() {
fmt.Println(add(15, 10))
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;!-- raw HTML omitted -->
&lt;p>In the above &lt;code>Addition Function&lt;/code> program we have two functions. The first is &lt;code>main()&lt;/code>, which doesn&amp;rsquo;t take any arguments (arguments are passed inside rounded brackets &lt;code>()&lt;/code>). The second function is our &lt;code>add&lt;/code> function, which you can see we have started with the &lt;code>func&lt;/code> keyword to declare a function, followed by the function name &lt;code>add()&lt;/code>, and we have passed two arguments &lt;code>x&lt;/code> and &lt;code>y&lt;/code>, which are type of &lt;code>int&lt;/code>. When two or more consecutively named function parameters or arguments share a type, you can omit the type from all but the last.&lt;/p>
&lt;p>In the above example, we shortend:&lt;/p>
&lt;p>&lt;code>x int, y int&lt;/code> to &lt;code>x, y int&lt;/code>&lt;/p>
&lt;p>The function is returning &lt;code>int&lt;/code> data type, which is single value, with &lt;code>return statement&lt;/code> statement of &lt;code>x + y&lt;/code>, which is an addition of numbers.&lt;/p>
&lt;p>To call this function, we need to type the function name (&lt;code>add&lt;/code> in this case) and a pair of parentheses with argumearguments separated by a comma (,) in our case, which is &lt;code>15, 10&lt;/code>.&lt;/p>
&lt;p>If you check the above program &lt;code>Println&lt;/code> is also a function. Let&amp;rsquo;s break down the structure of &lt;code>fmt.Println()&lt;/code> and see what is happening here.&lt;/p>
&lt;ul>
&lt;li>&lt;code>fmt.&lt;/code> :- It is an package which contain multiple function.&lt;/li>
&lt;li>&lt;code>Println&lt;/code> :- &lt;code>Println&lt;/code> is function name which resides in &lt;code>fmt&lt;/code> package. To use &lt;code>Println&lt;/code> package should be imported then only we can access function it offers.&lt;/li>
&lt;li>&lt;code>()&lt;/code> :- By using parentheses we are executing the function.&lt;/li>
&lt;/ul>
&lt;p>If the function takes a number of arguments and we don’t pass any or provide too few or too many, it will give you an error message saying how many arguments were expected, and you will need to fix your code.&lt;/p>
&lt;h4 id="multiple-return-value">Multiple Return Value&lt;/h4>
&lt;p>One of Go&amp;rsquo;s unusual features is that functions and methods can return multiple values. This feature is quite useful in various situations where you need to return more than one piece of information from a function. Multiple return values allow you to efficiently handle errors, return status code, or return additional context information along with the primary reuslt.&lt;/p>
&lt;p>Below is Division program which return multiple values like quotient, remainder :&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;div class="collapsable-code">
&lt;input id="495123768" type="checkbox" />
&lt;label for="495123768">
&lt;span class="collapsable-code__language">go&lt;/span>
&lt;span class="collapsable-code__title">Division&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-go" >&lt;code>
package main
import (
&amp;#34;fmt&amp;#34;
)
func divideAndRemainder(dividend, divisor int) (int, int) {
quotient := dividend / divisor
remainder := dividend % divisor
return quotient, remainder
}
func main() {
quotient, remainder := divideAndRemainder(10, 3)
fmt.Printf(&amp;#34;Quotient: %d, Remainder: %d\n&amp;#34;, quotient, remainder)
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;!-- raw HTML omitted -->
&lt;p>In the above example, the &lt;code>divideAndRemainder&lt;/code> function takes two integer parameters, &lt;code>dividend&lt;/code> and &lt;code>divisor&lt;/code>. It calculates the quotient and remainder of the division operation and returns both values as tuple (or pair) of integers. In Go, you specifiy the return types in parentheses immediately after the function signature. In below declaration &lt;code>(int, int)&lt;/code> is returning pair of integers in function return value.&lt;/p>
&lt;p>&lt;code>func divideAndRemainder(dividend, divisor int) (int, int) {}&lt;/code>&lt;/p>
&lt;p>When you call the &lt;code>divideAndRemainder&lt;/code> function in the &lt;code>main&lt;/code> function, you can capture both return values &lt;code>(quotient and remainder)&lt;/code> and use them as needed.&lt;/p>
&lt;h4 id="named-result-parameters">Named Result Parameters&lt;/h4>
&lt;p>Named Result Parameters allow us to declare names from the return values of a function in it&amp;rsquo;s signature. Named result parameters are particularly useful for improving the readability and documentation of a code. They make it clear what each return value represents and can be especially helpful in functions with multiple return values.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;div class="collapsable-code">
&lt;input id="597628341" type="checkbox" />
&lt;label for="597628341">
&lt;span class="collapsable-code__language">go&lt;/span>
&lt;span class="collapsable-code__title">Division with Named Result Parameters&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-go" >&lt;code>
package main
import &amp;#34;fmt&amp;#34;
func divideAndRemainder(dividend, divisor int) (quotient int, remainder int) {
quotient = dividend / divisor
remainder = dividend % divisor
return
}
func main() {
q, r := divideAndRemainder(10, 3)
fmt.Printf(&amp;#34;Quotient: %d, Remainder: %d\n&amp;#34;, q, r)
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;!-- raw HTML omitted -->
&lt;p>In this example, the &lt;code>divideAndRemainder&lt;/code> function has named result parameters &lt;code>quotient&lt;/code> and &lt;code>remainder&lt;/code> (&lt;code>(quotient int, remainder int)&lt;/code>). Inside the function body, you assign values to these variables, and you don&amp;rsquo;t need to use the &lt;code>return&lt;/code> statement explicitly. Go will automatically return the values of &lt;code>quotient&lt;/code> and &lt;code>remainder&lt;/code> when the function exits.&lt;/p>
&lt;p>Benefits of using named result parameters:&lt;/p>
&lt;ol>
&lt;li>&lt;code>**_Documentation and clarity_**&lt;/code>: It provide self-documentation for the function, making it clear what each return value represents. This can improve code readability and maintainability.&lt;/li>
&lt;li>&lt;code>**_Simplify return statement_**&lt;/code>: You don&amp;rsquo;t need to explicitly list the &lt;code>return&lt;/code> values in the return statement. This simplifies the code and reduces redundancy.&lt;/li>
&lt;li>&lt;code>**_Avoid variable shadowing_**&lt;/code>: When you use named result parameters, you can avoid variable shadowing issues that may occur if you redeclare the same variable names in a nested block.&lt;/li>
&lt;li>&lt;code>**_Facilitate readability in complex function _**&lt;/code>: In functions with many return values or complex logic, using named result parameters can make it easier to understand the meaning of each return value.&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>&lt;code>Note&lt;/code>:- Named result parameters are implicitly declared as local variables within the function. You can assign values to them directly, and they will be returned when the function exits. However,you cannot use the &lt;code>:=&lt;/code> short declaration operator to declare and assign values to named result parameters withing the same line; you should use the &lt;code>=&lt;/code> assignment operator.&lt;/p>
&lt;/blockquote>
&lt;h4 id="defer">Defer&lt;/h4>
&lt;p>In Go, the &lt;code>defer&lt;/code> statement is used to schedule a function call to be executed just before the surrounding function returns. It allows you to ensure that certain cleanup or finalization tasks are performed regardless of how the function exits, whether it&amp;rsquo;s due to noraml execution or an error.&lt;/p>
&lt;p>How &lt;code>defer&lt;/code> statement works in Go:&lt;/p>
&lt;ol>
&lt;li>&lt;code>**_Deferred functions are executed in reverse order_**&lt;/code>: When you use &lt;code>defer&lt;/code> to schedule a function call, Go adds it to a stack. The deferred functions are executed in reverse order, meaning the last scheduled function will be executed first, and so on. This behavior is useful when you need to reverse some action or cleanup resources.&lt;/li>
&lt;li>&lt;code>**_Deferred functions capture their arguments at the time of the defer statement_**&lt;/code>: If you pass arguments to a deferred function, those arguments are evaluated immediately, and their values are captured at the time of the &lt;code>defer&lt;/code> statement, not at the time the function is executed. This can lead to some interesting behavior in cases where the values of variables change before the function executes.&lt;/li>
&lt;/ol>
&lt;p>A simple example to illustrate how &lt;code>defer&lt;/code> works:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;div class="collapsable-code">
&lt;input id="734691582" type="checkbox" />
&lt;label for="734691582">
&lt;span class="collapsable-code__language">go&lt;/span>
&lt;span class="collapsable-code__title">Defer working&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-go" >&lt;code>
package main
import (
&amp;#34;fmt&amp;#34;
)
func main() {
defer fmt.Println(&amp;#34;This will be executed last&amp;#34;)
defer fmt.Println(&amp;#34;This will be executed second&amp;#34;)
fmt.Println(&amp;#34;This will be executed first&amp;#34;)
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;!-- raw HTML omitted -->
&lt;p>In this example, when the &lt;code>main&lt;/code> function is executed, it first prints &amp;ldquo;This will be executed first,&amp;rdquo; then schedules the two &lt;code>fmt.Println&lt;/code> functions using &lt;code>defer&lt;/code>. These deferred functions will be executed in reverse order when the &lt;code>main&lt;/code> function is about to return.&lt;/p>
&lt;p>In practice, you often use &lt;code>defer&lt;/code> for resource cleanup, like closing files, releasing locks, or other cleanup tasks, to ensure that these tasks are performed even if there&amp;rsquo;s an early return or an error condition.&lt;/p>
&lt;h3 id="data-types">Data Types&lt;/h3></content></item><item><title>OAuth2 and OpenID Connect</title><link>/notes/oauth2/</link><pubDate>Sun, 20 Aug 2023 00:00:00 +0000</pubDate><guid>/notes/oauth2/</guid><description>OAuth 2.0 OAuth 2.0 is an open authorization protocol, which enables application to access each other&amp;rsquo;s data. OAuth 2.0 does not share password data but instead uses authorization tokens to prove an identity between consumers and service providers. In simple term it uses authorization process to jump from one service to another without tapping in a new username and password. If you&amp;rsquo;re logged into Google and used those credntials for any app (Sign with Google), you&amp;rsquo;ve used OAuth.</description><content>&lt;h2 id="oauth-20">OAuth 2.0&lt;/h2>
&lt;p>OAuth 2.0 is an open authorization protocol, which enables application to access each other&amp;rsquo;s data. OAuth 2.0 does not share password data but instead uses authorization tokens to prove an identity between consumers and service providers. In simple term it uses authorization process to jump from one service to another without tapping in a new username and password. If you&amp;rsquo;re logged into Google and used those credntials for any app (Sign with Google), you&amp;rsquo;ve used OAuth.&lt;/p>
&lt;p>OAuth2 is the industry-standard protocol that enables secure machine-to-machine communication and grants limited access to data and services on behalf of users. The specification also covers delegated access to client types such as browser-based, server-side web, native/mobile apps, and connected devices.&lt;/p>
&lt;p>OAuth was originally designed for applications to get access to API&amp;rsquo;s (All they need to ability to access the API). OAuth doesn&amp;rsquo;t communicate with user information. OpenID communicate with user information.&lt;/p>
&lt;h2 id="oauth-20-actors">OAuth 2.0 Actors&lt;/h2>
&lt;p>OAuth 2.0 has different actors defined in the authentication and authorization process. These actors work together to ensure that the user&amp;rsquo;s information is kept secure and that the application only accesses the information that the user has explicitly granted permission for.&lt;/p>
&lt;figure class="center" >
&lt;img src="https://images2.imgbox.com/4d/c6/rYoOV6yD_o.png" alt="actors" style="border-radius: 8px;" />
&lt;figcaption class="center" >OAuth2 Actors&lt;/figcaption>
&lt;/figure></content></item><item><title>About</title><link>/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/about/</guid><description>Hi there Hello, I am Rushi Panchariya. I&amp;rsquo;m Software Engineer with passion for Gaming 🎮, Coding 👨‍💻 and Music 🎧.
I&amp;rsquo;m always excited to work on new technologies and learn more about them. I am excited to work on a project that will benefit the community and assist them address their difficulties in whatever manner possible. When I&amp;rsquo;m working on a project, a concept, or a task, I&amp;rsquo;m always intrigued about the outcome.</description><content>&lt;h1 id="hi-there-hahahugoshortcode5s0hbhb">Hi there
&lt;img src="/img/pikachu-running.gif" class="left" style="width: 50px;" />
&lt;/h1>
&lt;p>Hello, I am Rushi Panchariya. I&amp;rsquo;m &lt;strong>Software Engineer&lt;/strong> with passion for Gaming 🎮, Coding 👨‍💻 and Music 🎧.&lt;/p>
&lt;p>I&amp;rsquo;m always excited to work on new technologies and learn more about them. I am excited to work on a project that will benefit the community and assist them address their difficulties in whatever manner possible. When I&amp;rsquo;m working on a project, a concept, or a task, I&amp;rsquo;m always intrigued about the outcome.&lt;/p>
&lt;p>Feel free to visit my &lt;a href="https://github.com/imrushi">GitHub&lt;/a>.&lt;/p>
&lt;p>So, there you have it&amp;hellip; enjoy!&lt;/p></content></item><item><title>Projects</title><link>/projects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/</guid><description>Shopey Collabortive Project
Quickly capture what’s on your mind and create your shopping list. Record voice memos while on the move and have them automatically transcribed. Shopey makes it easy to capture a list for yourself, and share it with friends and family. Developed using Flutter and Java, with Google Firebase utilized for the database, hosting, and Google functions. CLI VSCode Extension Open-Source Contributor
Played a key role in the early stages of an open‐source Visual Studio Code extension development, aimed at enabling seamless interaction with Ory projects and services.</description><content>&lt;h2 id="shopeyhttpsplaygooglecomstoreappsdetailsidcomd2r2shopey">&lt;a href="https://play.google.com/store/apps/details?id=com.D2R2.shopey">Shopey&lt;/a>&lt;/h2>
&lt;p>&lt;strong>&lt;em>Collabortive Project&lt;/em>&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Quickly capture what’s on your mind and create your shopping list.&lt;/li>
&lt;li>Record voice memos while on the move and have them automatically transcribed.&lt;/li>
&lt;li>Shopey makes it easy to capture a list for yourself, and share it with friends and family.&lt;/li>
&lt;li>Developed using Flutter and Java, with Google Firebase utilized for the database, hosting, and Google functions.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="cli-vscode-extensionhttpsgithubcomvinckrcli-vscode-extension">&lt;a href="https://github.com/vinckr/cli-vscode-extension">CLI VSCode Extension&lt;/a>&lt;/h2>
&lt;p>&lt;strong>&lt;em>Open-Source Contributor&lt;/em>&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Played a key role in the early stages of an open‐source Visual Studio Code extension development, aimed at enabling seamless interaction with &lt;a href="https://github.com/ory">Ory&lt;/a> projects and services.&lt;/li>
&lt;li>Proposed and contributed to the concept of the extension, providing valuable input to the organization.&lt;/li>
&lt;li>Currently involved in the development of 7 to 8 commands for the extension, with ongoing contributions to enhance its functionality.&lt;/li>
&lt;li>Collaborating with a team of developers to ensure compatibility, functionality, and an optimal user experience.&lt;/li>
&lt;li>Project is currently in progress, with no specific release date set at this stage.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="datreehttpsgithubcomdatreeiodatreepullsqis3apris3aclosedauthor3aimrushi">&lt;a href="https://github.com/datreeio/datree/pulls?q=is%3Apr+is%3Aclosed+author%3Aimrushi">Datree&lt;/a>&lt;/h2>
&lt;p>&lt;strong>&lt;em>Open-Source Contributor&lt;/em>&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Datree is Open‐Source tool to prevent Kubernetes Misconfiguration.&lt;/li>
&lt;li>It automatically validates Kubernetes objects for rule violations, ensuring no misconfigurations reach production. It’s an E2E policy enforcement solution that can be used on the command line, admission webhook, or even as a kubectl plugin.&lt;/li>
&lt;li>Contributed two CLI commands: completion and Docs. The completion command enables auto‐completion of sub‐commands upon double‐
tab, while the Docs command opens the documentation website in the user’s default browser.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="pothole-detector-using-iothttpsgithubcomimrushipothole-detector">&lt;a href="https://github.com/imrushi/Pothole-detector">Pothole Detector Using IoT&lt;/a>&lt;/h2>
&lt;p>&lt;strong>&lt;em>Collabortive Project&lt;/em>&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>This project utilizes an IoT device mounted on a moped, bike, or car to detect and identify potholes on the road.&lt;/li>
&lt;li>The system locates the potholes and displays their locations on Maps.&lt;/li>
&lt;li>The project was implemented using the ELK (Elasticsearch, Logstash, Kibana) stack and Python.&lt;/li>
&lt;li>Raspberry Pi monitoring was achieved using Elastic Metricbeat.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="geo-dndhttpsgithubcomimrushigeo-dnd">&lt;a href="https://github.com/imrushi/Geo-DnD">Geo DnD&lt;/a>&lt;/h2>
&lt;p>&lt;strong>&lt;em>Collabortive Project&lt;/em>&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>This is an Android app built with Java.&lt;/li>
&lt;li>The app allows users to set a radius for a circle and select a location from Google Maps. Additionally, they can choose a mobile mode, such as general, silent, dnd, and more.&lt;/li>
&lt;li>Once the user enters the designated circle, the mode is automatically set accordingly. When the user is outside the set radius, the phone
switches to general mode.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>There are more projects which you can find on my &lt;a href="https://github.com/imrushi?tab=repositories">GitHub&lt;/a> 😊&lt;/strong>&lt;/p>
&lt;/blockquote></content></item></channel></rss>